# -*- coding: utf-8 -*-
"""MD_Simulation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1GPeWQINvGF10fZGqwt8Aq-uY4Mgk7Rvz
"""

# ===============================
# Program 2: MD Refinement of Docked Complex
# ===============================

# Install OpenMM + MDTraj
!pip install openmm mdtraj

from simtk import openmm, unit
from simtk.openmm import app
import mdtraj as md
import matplotlib.pyplot as plt

# -------------------------------
# Load receptor & best ligand (from Program 1)
# -------------------------------
receptor_file = receptor  # already pdbqt from previous program
ligand_file = best_ligand  # best ligand from docking

# NOTE: Need PDB format for OpenMM
# Convert pdbqt -> pdb
!obabel {receptor_file} -O receptor.pdb
!obabel {ligand_file} -O ligand.pdb

# Merge receptor + ligand into one PDB
complex_pdb = "complex.pdb"
with open(complex_pdb, "w") as out:
    out.write(open("receptor.pdb").read())
    out.write(open("ligand.pdb").read())

# -------------------------------
# Prepare system
# -------------------------------
pdb = app.PDBFile(complex_pdb)
forcefield = app.ForceField("amber14-all.xml", "amber14/tip3p.xml")

system = forcefield.createSystem(
    pdb.topology,
    nonbondedMethod=app.NoCutoff,
    constraints=app.HBonds
)

integrator = openmm.LangevinIntegrator(
    300*unit.kelvin,    # temperature
    1.0/unit.picoseconds,  # friction
    0.002*unit.picoseconds # timestep (2 fs)
)

simulation = app.Simulation(pdb.topology, system, integrator)
simulation.context.setPositions(pdb.positions)

# -------------------------------
# Energy minimization
# -------------------------------
print("Minimizing energy...")
simulation.minimizeEnergy()

# -------------------------------
# Short MD run
# -------------------------------
simulation.reporters.append(app.DCDReporter("trajectory.dcd", 100))
simulation.reporters.append(app.StateDataReporter(
    "md.log", 100, step=True, potentialEnergy=True, temperature=True
))

print("Running 5000 steps (~10 ps)...")
simulation.step(5000)

print("MD complete. Trajectory saved as trajectory.dcd")

# -------------------------------
# Analyze trajectory
# -------------------------------
traj = md.load("trajectory.dcd", top=complex_pdb)
rmsd = md.rmsd(traj, traj, 0)  # RMSD relative to first frame

plt.plot(rmsd)
plt.xlabel("Frame")
plt.ylabel("RMSD (nm)")
plt.title("Ligand-Receptor RMSD")
plt.show()